BÁO CÁO: Lớp DataProcessor
1. Giới thiệu
Lớp DataProcessor được xây dựng để xử lý dữ liệu dạng vector<int> thông qua một chuỗi các bộ lọc (filters) do người dùng đăng ký.
Lớp này sử dụng mẫu thiết kế Singleton để đảm bảo chỉ có một đối tượng DataProcessor tồn tại trong toàn bộ chương trình.
Ngoài ra, lớp còn hỗ trợ:
Đăng ký và quản lý các bộ lọc.
Tổ chức thứ tự xử lý dữ liệu bằng chuỗi xử lý (chain).
Hoàn tác (undo) dữ liệu về trạng thái trước đó.
Lưu và tải cấu hình chuỗi xử lý.
2. Cấu trúc và thành phần
2.1. Thuộc tính(private)
static DataProcessor* _instance;
static mutex _mtx;
map<string, function<void(vector<int>&)>> filters;
vector<string> chain;
vector<vector<int>> history;

_instance được sử dụng để lưu trữ đối tượng duy nhất của lớp DataProcessor
-mtx đối tượng mutex dùng để đồng bộ khi truy cập vào _instance trong môi trường đa luồng.
-filters: Bảng ánh xạ tên bộ lọc- dùng để xử lí dữ liệu.
-chain: Danh sách các bộ lọc sẽ được áp dụng theo thứ tự.
-history: Lưu trữ các trạng thái dữ liệu đã qua để hỗ trợ chức năng hoàn tác.
2.2. Phương thức khởi tạo
DataProcessor() là phương thức khởi tạo riêng tư, đảm bảo rằng đối tượng DataProcessor chỉ được tạo ra một lần duy nhất.
2.3 Truy xuất Singleton
DataProcessor::getInstance() là phương thức tĩnh được sử dụng để truy xuất đối tượng duy nhất của lớp DataProcessor. Phương thức này sử dụng cơ chế khóa (lock) để đảm bảo an toàn trong môi trường đa luồng.
Chỉ tạo mới _instance khi chưa tồn tại
2.4 Quản lí lịch sử dữ liệu
-Lưu lại một bản sao dữ liệu hiện tại vào lịch sử trước khi áp dụng bộ lọc mới.
-Giúp phục hồi dữ liệu về trạng thái trước đó khi cần thiết.
2.5 Quản lý bộ lọc
-Cho phép người dùng đăng ký các bộ lọc mới bằng cách cung cấp tên và hàm xử lý.
-Cung cấp giao diện để người dùng có thể cấu hình chuỗi bộ lọc theo ý muốn.
2.6 Quản lý chuỗi xử lý
addToChain: Thêm một bộ lọc vào chuỗi xử lý.
removeFilter: Xóa bộ lọc khỏi chuỗi.
clearChain: Xóa toàn bộ chuỗi.
listChain: Liệt kê các bộ lọc hiện có trong chuỗi.
2.7 Xử lí dữ liệu và hoàn tác
processData: Xử lý dữ liệu bằng cách áp dụng các bộ lọc trong chuỗi.
undo: Hoàn tác thao tác trước đó bằng cách khôi phục dữ liệu từ lịch sử.
2.8 Lưu và tải cấu hình
saveConfig: Ghi tên các bộ lọc trong chain xuống file.
loadConfig: Đọc file cấu hình và khôi phục lại chain nếu bộ lọc đó tồn tại.
3. Đặc điểm nổi bật
Áp dụng mẫu Singleton để quản lý duy nhất một đối tượng.
Cho phép mở rộng linh hoạt bằng cách đăng ký bộ lọc mới mà không cần sửa code xử lý.
Hỗ trợ undo để phục hồi dữ liệu.
Có khả năng lưu và tải cấu hình, giúp tái sử dụng chuỗi xử lý.

